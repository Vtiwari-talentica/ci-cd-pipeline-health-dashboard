pipeline {
    agent any
    
    environment {
        BUILD_NAME = "${env.JOB_NAME}"
        BUILD_ID = "${env.BUILD_NUMBER}"
        REPO_NAME = "Vtiwari-talentica/ci-cd-pipeline-health-dashboard"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Checking out code...'
                script {
                    currentBuild.description = "Build #${BUILD_NUMBER}"
                }
                sleep 2
                echo '‚úÖ Code checked out successfully'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing dependencies...'
                script {
                    sh 'echo "Installing dependencies for ${BUILD_NAME}"'
                }
                sleep 3
                echo '‚úÖ Dependencies installed'
            }
        }
        
        stage('Lint & Format') {
            steps {
                echo 'üîç Running linting...'
                sleep 1
                echo '‚úÖ Code linting passed'
            }
        }
        
        stage('Build') {
            steps {
                echo 'üî® Building application...'
                script {
                    sh 'echo "Building ${BUILD_NAME} #${BUILD_NUMBER}"'
                }
                sleep 4
                echo '‚úÖ Application built successfully'
            }
        }
        
        stage('Test') {
            steps {
                echo 'üß™ Running tests...'
                script {
                    // Simulate tests with occasional failures (10% chance)
                    def random = new Random()
                    def shouldFail = random.nextInt(10) == 0
                    
                    if (shouldFail) {
                        echo '‚ùå Tests failed!'
                        error('Test failure simulation')
                    } else {
                        echo '‚úÖ All tests passed!'
                    }
                }
                sleep 2
            }
        }
        
        stage('Deploy') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                echo 'üöÄ Deploying application...'
                sleep 1
                echo '‚úÖ Application deployed successfully'
            }
        }
    }
    
    post {
        always {
            script {
                // Send webhook to dashboard - simplified version
                def status = currentBuild.result ?: 'SUCCESS'
                def conclusion = status == 'SUCCESS' ? 'success' : 'failure'
                
                echo "üì° Sending webhook to dashboard..."
                echo "Build Status: ${status}"
                echo "Conclusion: ${conclusion}"
                
                // Try different webhook URLs
                def webhookUrls = [
                    'http://localhost:8001/webhook/jenkins',
                    'http://host.docker.internal:8001/webhook/jenkins',
                    'http://172.17.0.1:8001/webhook/jenkins'
                ]
                
                def success = false
                for (url in webhookUrls) {
                    if (!success) {
                        try {
                            echo "Trying webhook URL: ${url}"
                            
                            // Create simple curl command with inline JSON
                            def curlCommand = """
                                curl -X POST '${url}' \\
                                -H 'Content-Type: application/json' \\
                                -d '{
                                    "repository": {"full_name": "${REPO_NAME}"},
                                    "workflow": {"name": "${BUILD_NAME}"},
                                    "workflow_run": {
                                        "id": ${BUILD_ID},
                                        "name": "${BUILD_NAME}",
                                        "status": "completed",
                                        "conclusion": "${conclusion}",
                                        "run_number": ${BUILD_ID},
                                        "created_at": "${new Date().format('yyyy-MM-dd')}T${new Date().format('HH:mm:ss')}Z",
                                        "updated_at": "${new Date().format('yyyy-MM-dd')}T${new Date().format('HH:mm:ss')}Z",
                                        "html_url": "${BUILD_URL}"
                                    },
                                    "action": "completed"
                                }' \\
                                --connect-timeout 5 \\
                                --max-time 10
                            """.replaceAll(/\s+/, ' ').trim()
                            
                            def response = sh(script: curlCommand, returnStdout: true).trim()
                            
                            if (response.contains('success') || response.contains('processed')) {
                                echo "‚úÖ Webhook sent successfully to ${url}"
                                echo "Response: ${response}"
                                success = true
                            } else {
                                echo "‚ùå Webhook failed for ${url}, response: ${response}"
                            }
                        } catch (Exception e) {
                            echo "‚ùå Webhook failed for ${url}: ${e.getMessage()}"
                        }
                    }
                }
                
                if (!success) {
                    echo "‚ö†Ô∏è  All webhook attempts failed. Dashboard might not be running."
                    echo "Check dashboard status: docker-compose ps"
                }
            }
        }
        
        success {
            echo 'üéâ Pipeline completed successfully!'
        }
        
        failure {
            echo 'üí• Pipeline failed!'
        }
        
        cleanup {
            echo 'üßπ Cleaning up workspace...'
        }
    }
}
